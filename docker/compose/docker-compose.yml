version: '3.8'

services:
  # Production RPC Server
  verus-rpc-server:
    build:
      context: ../..
      dockerfile: docker/Dockerfile
      args:
        - RUST_VERSION=1.70
    container_name: verus-rpc-server
    restart: unless-stopped
    ports:
      - "127.0.0.1:8080:8080"  # Security: Bind to localhost only
    volumes:
      - ../../config:/app/config:ro
      - ../../logs:/app/logs
    environment:
      - RUST_LOG=info
      - RUST_BACKTRACE=0
      - DEVELOPMENT_MODE=false
      - ENABLE_SECURITY_HEADERS=true
    depends_on:
      - redis
      - verus-daemon
    networks:
      - verus-internal
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    healthcheck:
      test: ["CMD", "curl", "-f", "-H", "User-Agent: Docker-Health-Check", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Production Token Service
  token-service:
    build:
      context: ../..
      dockerfile: docker/Dockerfile
    container_name: verus-token-service
    restart: unless-stopped
    expose:
      - "8081"  # Security: Internal only
    volumes:
      - ../../config:/app/config:ro
      - ../../logs:/app/logs
    environment:
      - RUST_LOG=info
      - RUST_BACKTRACE=0
      - TOKEN_SERVICE_PORT=8081
    depends_on:
      - redis
      - verus-daemon
    networks:
      - verus-internal
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    command: ["token-service"]
    healthcheck:
      test: ["CMD", "curl", "-f", "-H", "User-Agent: Docker-Health-Check", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: verus-redis
    restart: unless-stopped
    expose:
      - "6379"  # Security: Internal only
    volumes:
      - redis-data:/data
    networks:
      - verus-internal
    command: redis-server --requirepass ${REDIS_PASSWORD:-default_secure_password_123} --bind 0.0.0.0 --protected-mode yes
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-default_secure_password_123}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  # Verus Daemon
  verus-daemon:
    build:
      context: ../..
      dockerfile: docker/Dockerfile.verus
    container_name: verus-daemon
    restart: unless-stopped
    expose:
      - "27486"  # Security: Internal only
    volumes:
      - verus-data:/home/verus/.komodo/VRSC
      - ../../docker/config/verus.conf:/home/verus/.komodo/VRSC/verus.conf:ro
    networks:
      - verus-internal
    environment:
      - VERUS_DATA_DIR=/home/verus/.komodo/VRSC
    healthcheck:
      test: ["CMD", "verus-cli", "-conf=/home/verus/.komodo/VRSC/verus.conf", "getinfo"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 300s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  # Caddy Reverse Proxy
  caddy:
    image: caddy:2-alpine
    container_name: verus-caddy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../../docker/config/Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy-data:/data
      - caddy-config:/config
      - ../../logs:/var/log/caddy
    depends_on:
      - verus-rpc-server
    networks:
      - verus-internal
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: verus-prometheus
    restart: unless-stopped
    expose:
      - "9090"  # Security: Internal only
    volumes:
      - ../../docker/config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - verus-internal
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m

volumes:
  redis-data:
    driver: local
  verus-data:
    driver: local
  caddy-data:
    driver: local
  caddy-config:
    driver: local
  prometheus-data:
    driver: local

networks:
  verus-internal:
    # Security: Internal network only
    internal: true
